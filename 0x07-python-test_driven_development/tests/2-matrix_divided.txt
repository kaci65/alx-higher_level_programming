The ``2-matrix_divided(matrix, div)`` module
===================================

Using ``matrix_divided``
-----------------------------------

This is an example text file in reStructuredText format.  First import
``matrix_divided`` from the ``2-matrix_divided`` module:

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided

# Check if output is correct:

    Divide matrix containing a string by 3:
    >>> matrix_divided([["Hello", 2, 3], [4, 5, 6]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    Divide matrix containing a tuple inside a row by 3:
    >>> matrix = [[4, 5, 6], [(4, 5), 6]]
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    Divide matrix made up of a tuple by 3:
    >>> matrix = (4, 5, 6)
    >>> matrix_divided(matrix, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats
    
    Divide matrix with different row sizes by 3:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size
    
    Divide matrix by NaN:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 'Python')
    Traceback (most recent call last):
    ...
    TypeError: div must be a number
    
    Divide matrix by 0:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero
    
    Divide matrix by 3:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]


